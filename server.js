const express = require('express');
const cors = require('cors');
const { google } = require('googleapis');
const NodeCache = require('node-cache');
const winston = require('winston');
const Redis = require('redis');

// Kh·ªüi t·∫°o cache v·ªõi TTL (time-to-live) l√† 1 gi·ªù (3600 gi√¢y)
const cache = new NodeCache({ stdTTL: 3600, checkperiod: 120 }); // Ki·ªÉm tra h·∫øt h·∫°n m·ªói 2 ph√∫t
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [new winston.transports.Console()]
});

let redisClient;

const connectRedis = async (retries = 5, delay = 2000) => {
  redisClient = Redis.createClient({
    url: process.env.REDIS_URL || 'redis://localhost:6379',
    socket: {
      reconnectStrategy: (attempts) => {
        if (attempts >= retries) return new Error('Max retries reached');
        return Math.min(attempts * delay, 10000); // TƒÉng delay, t·ªëi ƒëa 10s
      },
      connectTimeout: 10000 // Timeout k·∫øt n·ªëi 10s
    }
  });

  redisClient.on('error', (err) => logger.error('Redis Client Error', err));
  redisClient.on('reconnecting', () => logger.info('Reconnecting to Redis...'));
  redisClient.on('ready', () => logger.info('Redis connected successfully'));

  try {
    await redisClient.connect();
    logger.info('Initial Redis connection established');
  } catch (err) {
    logger.error('Failed to connect to Redis after retries:', err);
    throw err;
  }
};

connectRedis(); // Kh√¥ng tho√°t server ngay

const app = express();

// C·∫•u h√¨nh CORS
app.use(cors({
  origin: "https://pedmed-vnch.web.app",
  methods: ["GET", "POST", "PUT", "DELETE"],
  allowedHeaders: ["Content-Type", "Authorization"],
  credentials: true // N·∫øu c·∫ßn g·ª≠i cookie ho·∫∑c auth token
}));

// X·ª≠ l√Ω t·∫•t c·∫£ y√™u c·∫ßu OPTIONS m·ªôt c√°ch r√µ r√†ng
app.options('*', (req, res) => {
  res.setHeader('Access-Control-Allow-Origin', 'https://pedmed-vnch.web.app');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  res.setHeader('Access-Control-Allow-Credentials', 'true');
  res.sendStatus(204); // No Content
});

app.use(express.json());

// ID c·ªßa Google Sheet
const SPREADSHEET_ID = '1mDJIil1rmEXEl7tV5qq3j6HkbKe1padbPhlQMiYaq9U';

// Kh·ªüi t·∫°o Google Sheets API client
const auth = new google.auth.GoogleAuth({
  credentials: JSON.parse(process.env.GOOGLE_CREDENTIALS),
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

async function getSheetsClient() {
  logger.info('Initializing Google Sheets client');
  try {
    const authClient = await auth.getClient();
    return google.sheets({ version: 'v4', auth: authClient });
  } catch (error) {
    logger.error('Failed to initialize Google Sheets client:', error);
    throw error;
  }
}

async function getAccessToken() {
  logger.info("üîÑ ƒêang l·∫•y Access Token...");

  try {
      const refreshToken = process.env.REFRESH_TOKEN;
      const clientId = process.env.CLIENT_ID;
      const clientSecret = process.env.CLIENT_SECRET;

      if (!refreshToken || !clientId || !clientSecret) {
          throw new Error("Thi·∫øu th√¥ng tin OAuth (REFRESH_TOKEN, CLIENT_ID, CLIENT_SECRET) trong m√¥i tr∆∞·ªùng!");
      }

      const tokenUrl = "https://oauth2.googleapis.com/token";
      const payload = new URLSearchParams({
          client_id: clientId,
          client_secret: clientSecret,
          refresh_token: refreshToken,
          grant_type: "refresh_token"
      });

      const response = await fetch(tokenUrl, {
          method: "POST",
          headers: { "Content-Type": "application/x-www-form-urlencoded" },
          body: payload
      });

      const json = await response.json();
      logger.info("üìå Ph·∫£n h·ªìi t·ª´ Google khi l·∫•y Access Token:", json);

      if (!response.ok) {
          throw new Error(`L·ªói khi l·∫•y Access Token: ${json.error}`);
      }

      logger.info("‚úÖ Access Token l·∫•y th√†nh c√¥ng!");
      return json.access_token;
  } catch (error) {
      logger.error("‚ùå L·ªói khi l·∫•y Access Token:", error.message);
      throw error;
  }
}

// üìß H√†m g·ª≠i email b·∫±ng Gmail API
async function sendEmailWithGmailAPI(toEmail, subject, body) {
  logger.info(`üìß Chu·∫©n b·ªã g·ª≠i email ƒë·∫øn: ${toEmail}`);

    try {
        const accessToken = await getAccessToken();

        if (!accessToken) {
          logger.error('No Access Token received');
          throw new Error("Kh√¥ng th·ªÉ l·∫•y Access Token!");
        }
        logger.info('Access Token obtained successfully');

        const url = "https://www.googleapis.com/gmail/v1/users/me/messages/send";
        const rawEmail = [
            "MIME-Version: 1.0",
            "Content-Type: text/html; charset=UTF-8",
            `From: PedMedVN <pedmedvn.nch@gmail.com>`,
            `To: <${toEmail}>`,
            `Subject: =?UTF-8?B?${Buffer.from(subject).toString('base64')}?=`,
            "",
            body
        ].join("\r\n");

        const encodedMessage = Buffer.from(rawEmail)
            .toString('base64')
            .replace(/\+/g, '-')
            .replace(/\//g, '_')
            .replace(/=+$/, '');
        
        console.log("üì§ G·ª≠i request t·ªõi Gmail API...");
        const response = await fetch(url, {
            method: "POST",
            headers: {
                "Authorization": `Bearer ${accessToken}`,
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ raw: encodedMessage })
        });

        const result = await response.json();
        if (!response.ok) {
            logger.error("‚ùå L·ªói g·ª≠i email:", result);
            throw new Error(`L·ªói g·ª≠i email: ${result.error.message}`);
        }

        logger.info("‚úÖ Email ƒë√£ g·ª≠i th√†nh c√¥ng:", result);
        return true; // Th√†nh c√¥ng
    } catch (error) {
        logger.error("‚ùå L·ªói khi g·ª≠i email:", error.message);
        throw error; // N√©m l·ªói ƒë·ªÉ endpoint b·∫Øt
    }
}

// API l·∫•y d·ªØ li·ªáu t·ª´ Google Sheets
app.get('/api/drugs', async (req, res) => {
  logger.info('Request received for /api/drugs', { query: req.query });
  const { query, page: pageRaw = 1, limit: limitRaw = 10 } = req.query;

  const page = isNaN(parseInt(pageRaw)) || parseInt(pageRaw) < 1 ? 1 : parseInt(pageRaw);
  const limit = isNaN(parseInt(limitRaw)) || parseInt(limitRaw) < 1 ? 10 : parseInt(limitRaw);

  const cacheKey = 'all_drugs'; // Key c·ªë ƒë·ªãnh cho to√†n b·ªô d·ªØ li·ªáu

  const controller = new AbortController();
  const timeout = setTimeout(() => controller.abort(), 10000); // 10 gi√¢y
  try {
    // Ki·ªÉm tra cache tr∆∞·ªõc
    let drugs = cache.get(cacheKey);
    if (!drugs) {
      console.log('Cache miss - L·∫•y d·ªØ li·ªáu t·ª´ Google Sheets');
      const sheets = await getSheetsClient();
      const response = await sheets.spreadsheets.values.get({
        spreadsheetId: SPREADSHEET_ID,
        range: 'pedmedvnch',
        signal: controller.signal
      });
      clearTimeout(timeout);

    const rows = response.data.values || [];
    console.log('D·ªØ li·ªáu th√¥ t·ª´ Google Sheets:', rows);

    drugs = rows.slice(1).map(row => ({
      'Ho·∫°t ch·∫•t': row[2], // C·ªôt C
      'C·∫≠p nh·∫≠t': row[3], // C·ªôt D
      'Ph√¢n lo·∫°i d∆∞·ª£c l√Ω': row[4], // C·ªôt E
      'Li·ªÅu th√¥ng th∆∞·ªùng tr·∫ª s∆° sinh': row[5], // C·ªôt F
      'Li·ªÅu th√¥ng th∆∞·ªùng tr·∫ª em': row[6], // C·ªôt G
      'Hi·ªáu ch·ªânh li·ªÅu theo ch·ª©c nƒÉng th·∫≠n': row[7], // C·ªôt H
      'Hi·ªáu ch·ªânh li·ªÅu theo ch·ª©c nƒÉng gan': row[8], // C·ªôt I
      'Ch·ªëng ch·ªâ ƒë·ªãnh': row[9], // C·ªôt J
      'T√°c d·ª•ng kh√¥ng mong mu·ªën': row[10], // C·ªôt K
      'C√°ch d√πng (ngo√†i IV)': row[11], // C·ªôt L
      'T∆∞∆°ng t√°c thu·ªëc ch·ªëng ch·ªâ ƒë·ªãnh': row[12], // C·ªôt M
      'Ng·ªô ƒë·ªôc/Qu√° li·ªÅu': row[13], // C·ªôt N
      'C√°c th√¥ng s·ªë c·∫ßn theo d√µi': row[14], // C·ªôt O
      'B·∫£o hi·ªÉm y t·∫ø thanh to√°n': row[15], // C·ªôt P
    }));

    // L∆∞u v√†o cache
    cache.set(cacheKey, drugs);
    console.log('D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o cache');
  } else {
    console.log('Cache hit - L·∫•y d·ªØ li·ªáu t·ª´ cache');
  }

    // L·ªçc d·ªØ li·ªáu n·∫øu c√≥ query
    if (query) {
      const filteredDrugs = drugs.filter(drug =>
        drug['Ho·∫°t ch·∫•t']?.toLowerCase().includes(query.toLowerCase()));
        const start = (page - 1) * limit;
        const end = start + parseInt(limit);
        return res.json({
          total: filteredDrugs.length,
          page: parseInt(page),
          data: filteredDrugs.slice(start, end)
        });
    }

    console.log('D·ªØ li·ªáu ƒë√£ √°nh x·∫°:', drugs);
    res.json(drugs);
  } catch (error) {
    clearTimeout(timeout);
    logger.error('L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ Google Sheets:', error);
    res.status(500).json({ error: 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu' });
  }
});

app.post('/api/drugs/invalidate-cache', async (req, res) => {
  cache.del('all_drugs'); // X√≥a cache v·ªõi node-cache
  res.json({ success: true, message: 'Cache ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi' });
});

// API ki·ªÉm tra ƒëƒÉng nh·∫≠p
app.post('/api/login', async (req, res) => {
  logger.info('Nh·∫≠n y√™u c·∫ßu ƒëƒÉng nh·∫≠p', { body: req.body });
  const { username, password, deviceId } = req.body;

  const controller = new AbortController();
  const timeout = setTimeout(() => controller.abort(), 10000);
  try {
    const sheets = await getSheetsClient();
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: 'Accounts',
      signal: controller.signal
    });
    clearTimeout(timeout);

    const rows = response.data.values;
    if (!rows || rows.length === 0) {
        return res.status(404).send('Kh√¥ng c√≥ d·ªØ li·ªáu t√†i kho·∫£n.');
    }

    const headers = rows[0];
    const usernameIndex = headers.indexOf("Username");
    const passwordIndex = headers.indexOf("Password");
    const approvedIndex = headers.indexOf("Approved");
    const device1Index = headers.indexOf("Device_1");
    const device2Index = headers.indexOf("Device_2");

    if (usernameIndex === -1 || passwordIndex === -1 || approvedIndex === -1) {
      return res.status(500).json({ success: false, message: "L·ªói c·∫•u tr√∫c Google Sheets!" });
    }

    const userRowIndex = rows.findIndex(row => row[usernameIndex] === username);
    if (userRowIndex === -1) {
      return res.json({ success: false, message: "T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u ch∆∞a ƒë√∫ng!" });
    }

    const user = rows[userRowIndex];
    // üîπ Ki·ªÉm tra m·∫≠t kh·∫©u
    if (user[passwordIndex]?.trim() !== password.trim()) {
      return res.json({ success: false, message: "T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u ch∆∞a ƒë√∫ng!" });
    }

    // üîπ Ki·ªÉm tra tr·∫°ng th√°i "ƒê√£ duy·ªát"
    if (user[approvedIndex]?.trim().toLowerCase() !== "ƒë√£ duy·ªát") {
      return res.json({ success: false, message: "T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c ph√™ duy·ªát b·ªüi qu·∫£n tr·ªã vi√™n." });
    }

    let currentDevices = [user[device1Index], user[device2Index]].filter(Boolean);
    if (currentDevices.includes(deviceId)) {
        return res.json({ success: true, message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!" });
    }

    if (currentDevices.length >= 2) {
        return res.json({
            success: false,
            message: "T√†i kho·∫£n ƒë√£ ƒëƒÉng nh·∫≠p tr√™n 2 thi·∫øt b·ªã. Vui l√≤ng ch·ªçn thi·∫øt b·ªã c·∫ßn ƒëƒÉng xu·∫•t.",
            devices: currentDevices
        });
    }

    currentDevices.push(deviceId);
    currentDevices = currentDevices.slice(-2);

    await sheets.spreadsheets.values.update({
        spreadsheetId: SPREADSHEET_ID,
        range: `Accounts!I${userRowIndex + 1}:J${userRowIndex + 1}`,
        valueInputOption: "RAW",
        resource: { values: [currentDevices] }
    });

    return res.json({ success: true, message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng v√† thi·∫øt b·ªã ƒë√£ ƒë∆∞·ª£c l∆∞u!" });

} catch (error) {
    clearTimeout(timeout);
    logger.error('L·ªói khi ki·ªÉm tra t√†i kho·∫£n:', error);
    return res.status(500).send('L·ªói m√°y ch·ªß.');
}
});

//API ki·ªÉm tra tr·∫°ng th√°i ƒë√£ duy·ªát
app.post('/api/check-session', async (req, res) => {
  logger.info('Request received for /api/check-session', { body: req.body });
  const { username, deviceId } = req.body;

  if (!username || !deviceId) {
    console.log("L·ªói: Kh√¥ng c√≥ t√™n ƒëƒÉng nh·∫≠p ho·∫∑c Device ID");
    return res.status(400).json({ success: false, message: "Thi·∫øu th√¥ng tin t√†i kho·∫£n ho·∫∑c thi·∫øt b·ªã!" });
  }

  try {
    console.log(`üìå Ki·ªÉm tra tr·∫°ng th√°i t√†i kho·∫£n c·ªßa: ${username}, DeviceID: ${deviceId}`);
    const sheets = await getSheetsClient();
    const range = 'Accounts'; 
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range,
    });

    const rows = response.data.values;
    if (!rows || rows.length === 0) {
      console.log("Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n trong Google Sheets");
      return res.json({ success: false, message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n!" });
    }

    const headers = rows[0];
    const usernameIndex = headers.indexOf("Username");
    const approvedIndex = headers.indexOf("Approved");
    const device1Index = headers.indexOf("Device_1");
    const device2Index = headers.indexOf("Device_2");

    if (usernameIndex === -1 || approvedIndex === -1 || device1Index === -1 || device2Index === -1) {
      console.log("L·ªói: Kh√¥ng t√¨m th·∫•y c·ªôt Username, Approved ho·∫∑c Device");
      return res.status(500).json({ success: false, message: "L·ªói c·∫•u tr√∫c Google Sheets!" });
    }

    const accounts = rows.slice(1);
    const user = accounts.find(row => row[usernameIndex]?.trim() === username.trim());

    if (!user) {
      console.log("T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!");
      return res.json({ success: false, message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!" });
    }

    console.log(`üìå Tr·∫°ng th√°i t√†i kho·∫£n: ${user[approvedIndex]}`);

    if (!user[approvedIndex] || user[approvedIndex]?.trim().toLowerCase() !== "ƒë√£ duy·ªát") {
      console.log("‚ö†Ô∏è T√†i kho·∫£n b·ªã h·ªßy duy·ªát, c·∫ßn ƒëƒÉng xu·∫•t!");
      return res.json({ success: false, message: "T√†i kho·∫£n ƒë√£ b·ªã h·ªßy duy·ªát!" });
    }

    // Ki·ªÉm tra xem thi·∫øt b·ªã c√≤n h·ª£p l·ªá kh√¥ng
    const currentDevices = [user[device1Index], user[device2Index]].filter(Boolean);
    console.log(`üìå Danh s√°ch thi·∫øt b·ªã h·ª£p l·ªá: ${currentDevices}`);

    if (!currentDevices.includes(deviceId)) {
      console.log("‚ö†Ô∏è Thi·∫øt b·ªã kh√¥ng c√≤n h·ª£p l·ªá, c·∫ßn ƒëƒÉng xu·∫•t!");
      return res.json({ success: false, message: "Thi·∫øt b·ªã c·ªßa b·∫°n ƒë√£ b·ªã ƒëƒÉng xu·∫•t!" });
    }

    res.json({ success: true });

  } catch (error) {
    logger.error("‚ùå L·ªói khi ki·ªÉm tra tr·∫°ng th√°i t√†i kho·∫£n:", error);
    res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß!" });
  }
});

app.post('/api/logout-device', async (req, res) => {
  logger.info('Request received for /api/logout-device', { body: req.body });
  try {
      const { username, deviceId, newDeviceId } = req.body;

      if (!username || !deviceId || !newDeviceId) {
          return res.status(400).json({ success: false, message: "Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt" });
      }

      const sheets = await getSheetsClient();
      const range = 'Accounts';
      const response = await sheets.spreadsheets.values.get({
          spreadsheetId: SPREADSHEET_ID,
          range,
      });

      const rows = response.data.values;
      const headers = rows[0];
      const usernameIndex = headers.indexOf("Username");
      const device1Index = headers.indexOf("Device_1");
      const device2Index = headers.indexOf("Device_2");

      const userRowIndex = rows.findIndex(row => row[usernameIndex] === username);
      if (userRowIndex === -1) {
          return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n" });
      }

      let devices = [rows[userRowIndex][device1Index], rows[userRowIndex][device2Index]].filter(Boolean);

      devices = devices.filter(id => id !== deviceId); // X√≥a thi·∫øt b·ªã ƒë√£ ch·ªçn
      devices.push(newDeviceId);

      await sheets.spreadsheets.values.update({
          spreadsheetId: SPREADSHEET_ID,
          range: `Accounts!I${userRowIndex + 1}:J${userRowIndex + 1}`,
          valueInputOption: "RAW",
          resource: { values: [devices] }
      });

      return res.json({ success: true, message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng!" });

    } catch (error) {
      logger.error('L·ªói khi ƒëƒÉng xu·∫•t thi·∫øt b·ªã:', error);
      return res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß" });
    }
  });

//API ki·ªÉm tra t√™n ƒëƒÉng nh·∫≠p
let cachedUsernames = [];

async function loadUsernames() {
    try {
        const sheets = await getSheetsClient();
        const range = 'Accounts';
        const response = await sheets.spreadsheets.values.get({
            spreadsheetId: SPREADSHEET_ID,
            range,
        });

        if (!response || !response.data || !response.data.values) {
            console.error("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i danh s√°ch username.");
            return;
        }

        const rows = response.data.values;
        const headers = rows[0] || [];
        const usernameIndex = headers.indexOf("Username");

        if (usernameIndex === -1) {
            console.error("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·ªôt Username.");
            return;
        }

        cachedUsernames = rows.slice(1).map(row => row[usernameIndex]?.trim().toLowerCase());
        console.log("‚úÖ T·∫£i danh s√°ch username th√†nh c√¥ng.");
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i danh s√°ch username:", error);
    }
}

// T·∫£i danh s√°ch username khi server kh·ªüi ƒë·ªông
loadUsernames();

// API ki·ªÉm tra username
app.post('/api/check-username', async (req, res) => {
    try {
        const { username } = req.body;
        if (!username) {
            return res.status(400).json({ exists: false, message: "Thi·∫øu t√™n ƒëƒÉng nh·∫≠p!" });
        }

        const isUsernameTaken = cachedUsernames.includes(username.trim().toLowerCase());

        return res.json({ exists: isUsernameTaken });
    } catch (error) {
        console.error("‚ùå L·ªói khi ki·ªÉm tra username:", error);
        return res.status(500).json({ exists: false, message: "L·ªói m√°y ch·ªß!" });
    }
});

// H√†m ki·ªÉm tra ƒë·ªãnh d·∫°ng email h·ª£p l·ªá
function isValidEmail(email) {
  const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailPattern.test(email);
}

//API ƒëƒÉng k√Ω user
app.post('/api/register', async (req, res) => {
  logger.info('Request received for /api/register', { body: req.body });
  const { username, password, fullname, email, phone } = req.body;

  if (!username || !password || !fullname || !email || !phone) {
      return res.status(400).json({ success: false, message: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
  }

  if (!isValidEmail(email)) {
    return res.status(400).json({ success: false, message: "Email kh√¥ng h·ª£p l·ªá!" });
  }

  const controller = new AbortController();
  const timeout = setTimeout(() => controller.abort(), 10000);
  try {
      const sheets = await getSheetsClient();
      
      // üîπ Ki·ªÉm tra xem username ƒë√£ t·ªìn t·∫°i ch∆∞a
      const response = await sheets.spreadsheets.values.get({
          spreadsheetId: SPREADSHEET_ID,
          range: 'Accounts',
          signal: controller.signal
      });
      clearTimeout(timeout);

      const rows = response.data.values;
      if (!rows || rows.length === 0) {
          return res.status(500).json({ success: false, message: "L·ªói d·ªØ li·ªáu Google Sheets!" });
      }

      const headers = rows[0];
      const usernameIndex = headers.indexOf("Username");
      const emailIndex = headers.indexOf("Email");

      if (usernameIndex === -1 || emailIndex === -1) {
        return res.status(500).json({ success: false, message: "L·ªói c·∫•u tr√∫c Google Sheets!" });
      }

      const accounts = rows.slice(1);
      const isTaken = accounts.some(row => row[usernameIndex]?.trim() === username.trim());
      const isEmailTaken = accounts.some(row => row[emailIndex]?.trim() === email.trim());

      if (isTaken) {
          return res.json({ success: false, message: "T√™n ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá!" });
      }

      if (isEmailTaken) {
        return res.json({ success: false, message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!" });
      }

      // üîπ Th√™m c·ªôt Date (ng√†y ƒëƒÉng k√Ω)
      const today = new Date().toISOString().split("T")[0]; // L·∫•y ng√†y hi·ªán t·∫°i YYYY-MM-DD
      const newUser = [[username, password, fullname, email, phone, "Ch∆∞a duy·ªát", today]];

      await sheets.spreadsheets.values.append({
          spreadsheetId: SPREADSHEET_ID,
          range,
          valueInputOption: "USER_ENTERED",
          resource: { values: newUser }
      });

      res.json({ success: true, message: "ƒêƒÉng k√Ω th√†nh c√¥ng! Th√¥ng b√°o ph√™ duy·ªát t√†i kho·∫£n th√†nh c√¥ng s·∫Ω ƒë∆∞·ª£c g·ª≠i t·ªõi email c·ªßa b·∫°n (c√≥ th·ªÉ c·∫ßn ki·ªÉm tra trong m·ª•c Spam)." });

  } catch (error) {
      clearTimeout(timeout);
      logger.error("L·ªói khi ƒëƒÉng k√Ω t√†i kho·∫£n:", error);
      res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß!" });
  }
});

const crypto = require("crypto");

//API g·ª≠i OTP ƒë·∫øn email user
app.post('/api/send-otp', async (req, res) => {
  logger.info('Request received for /api/send-otp', { body: req.body });

  if (!redisClient || !redisClient.isOpen) {
    logger.error('Redis not ready or disconnected');
    res.setHeader('Access-Control-Allow-Origin', 'https://pedmed-vnch.web.app');
    return res.status(503).json({ success: false, message: "H·ªá th·ªëng t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng, vui l√≤ng th·ª≠ l·∫°i sau!" });
  }

  const { username } = req.body;
  if (!username) {
    logger.warn("‚ùå Thi·∫øu username trong request!");
    res.setHeader('Access-Control-Allow-Origin', 'https://pedmed-vnch.web.app');
    return res.status(400).json({ success: false, message: "Thi·∫øu th√¥ng tin t√†i kho·∫£n!" });
  }

  try {
    logger.info(`Fetching user data for ${username}`);
    const sheets = await getSheetsClient();
    const controller = new AbortController();
    const timeout = setTimeout(() => controller.abort(), 10000);
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: 'Accounts',
      signal: controller.signal
    });
    clearTimeout(timeout);

    const rows = response.data.values || [];
    if (!rows.length) {
      logger.warn('No data found in Accounts sheet');
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu t√†i kho·∫£n!" });
    }
    const headers = rows[0];
    const usernameIndex = headers.indexOf("Username");
    const emailIndex = headers.indexOf("Email");

    const user = rows.find(row => row[usernameIndex]?.trim() === username.trim());
    if (!user) {
      logger.warn(`User ${username} not found`);
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n!" });
    }

    const userEmail = user[emailIndex];
    if (!isValidEmail(userEmail)) {
      logger.warn(`Invalid email for ${username}: ${userEmail}`);
      return res.status(400).json({ success: false, message: "Email kh√¥ng h·ª£p l·ªá!" });
    }

    const otpCode = Math.floor(100000 + Math.random() * 900000);
    logger.info(`Generated OTP for ${username}: ${otpCode}`);

    // L∆∞u OTP v√†o Redis
    await redisClient.setEx(username, 300, otpCode.toString());
    logger.info(`Stored OTP in Redis for ${username}`);

    await sendEmailWithGmailAPI(userEmail, "M√É X√ÅC NH·∫¨N ƒê·ªîI M·∫¨T KH·∫®U", `
      <h2 style="color: #4CAF50;">Xin ch√†o ${username}!</h2>
      <p style="font-weight: bold">M√£ x√°c nh·∫≠n ƒë·ªïi m·∫≠t kh·∫©u c·ªßa b·∫°n l√†: 
      <h3 style="font-weight: bold">${otpCode}</h3></p>
      <p>Vui l√≤ng nh·∫≠p ngay m√£ n√†y v√†o trang web ƒë·ªÉ ti·∫øp t·ª•c ƒë·ªïi m·∫≠t kh·∫©u.</p>
    `);

    return res.json({ success: true, message: "M√£ x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n!" });
  } catch (error) {
    logger.error("‚ùå L·ªói m√°y ch·ªß khi g·ª≠i OTP:", error);
    res.setHeader('Access-Control-Allow-Origin', 'https://pedmed-vnch.web.app');
    return res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß!" });
  }
});

//API x√°c th·ª±c OTP
app.post('/api/verify-otp', async (req, res) => {
  logger.info('Request received for /api/verify-otp', { body: req.body });
  if (!redisClient.isOpen) {
    logger.error('Redis not ready');
    return res.status(500).json({ success: false, message: "Redis kh√¥ng s·∫µn s√†ng!" });
  }

  const { username, otp } = req.body;
  if (!username || !otp) return res.status(400).json({ success: false, message: "Thi·∫øu th√¥ng tin x√°c minh!" });

  try {
    const savedOtp = await redisClient.get(username);
    if (!savedOtp) return res.status(400).json({ success: false, message: "OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });

    if (savedOtp !== otp) return res.status(400).json({ success: false, message: "M√£ OTP kh√¥ng ƒë√∫ng!" });

    await redisClient.del(username);
    return res.json({ success: true, message: "X√°c minh th√†nh c√¥ng, h√£y ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi!" });
  } catch (error) {
    logger.error("‚ùå L·ªói khi x√°c minh OTP:", error);
    return res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß!" });
  }
});

//API c·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
app.post('/api/reset-password', async (req, res) => {
  logger.info('Request received for /api/reset-password', { body: req.body });
  const { username, newPassword } = req.body;

  if (!username || !newPassword) {
      console.log("‚ùå Thi·∫øu th√¥ng tin ƒë·ªïi m·∫≠t kh·∫©u!");
      return res.status(400).json({ success: false, message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
  }

  try {
      const sheets = await getSheetsClient();
      const range = 'Accounts';
      const response = await sheets.spreadsheets.values.get({
          spreadsheetId: SPREADSHEET_ID,
          range,
      });

      const rows = response.data.values;
      const headers = rows[0];
      const usernameIndex = headers.indexOf("Username");
      const passwordIndex = headers.indexOf("Password");
      const device1Index = headers.indexOf("Device_1");
      const device2Index = headers.indexOf("Device_2");

      if (usernameIndex === -1 || passwordIndex === -1 || device1Index === -1 || device2Index === -1) {
          console.log("‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt c·∫ßn thi·∫øt trong Google Sheets!");
          return res.status(500).json({ success: false, message: "L·ªói c·∫•u tr√∫c Google Sheets!" });
      }

      const userRowIndex = rows.findIndex(row => row[usernameIndex]?.trim() === username.trim());

      if (userRowIndex === -1) {
          console.log("‚ùå T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!");
          return res.status(404).json({ success: false, message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!" });
      }

      const oldPassword = rows[userRowIndex][passwordIndex];
      console.log(`üîç M·∫≠t kh·∫©u c≈©: ${oldPassword}`);

      if (newPassword === oldPassword) {
          console.log("‚ùå M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c tr√πng v·ªõi m·∫≠t kh·∫©u c≈©!");
          return res.status(400).json({ success: false, message: "M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c gi·ªëng m·∫≠t kh·∫©u c≈©!" });
      }

      // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi trong Google Sheets
      await sheets.spreadsheets.values.update({
          spreadsheetId: SPREADSHEET_ID,
          range: `Accounts!B${userRowIndex + 1}`, // C·ªôt B ch·ª©a m·∫≠t kh·∫©u
          valueInputOption: "RAW",
          resource: { values: [[newPassword]] }
      });

      // X√≥a Device_1 & Device_2 nh∆∞ng gi·ªØ nguy√™n c√°c c·ªôt kh√°c
      await sheets.spreadsheets.values.update({
        spreadsheetId: SPREADSHEET_ID,
        range: `Accounts!I${userRowIndex + 1}:J${userRowIndex + 1}`, // C·ªôt I & J ch·ª©a thi·∫øt b·ªã
        valueInputOption: "RAW",
        resource: { values: [["", ""]] }
      });

      console.log("‚úÖ M·∫≠t kh·∫©u ƒë√£ c·∫≠p nh·∫≠t th√†nh c√¥ng!");
      console.log("üìå X√≥a to√†n b·ªô thi·∫øt b·ªã ƒëƒÉng nh·∫≠p!");
      return res.json({ success: true, message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng! H√£y ƒëƒÉng nh·∫≠p l·∫°i." });

  } catch (error) {
      logger.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u:", error);
      return res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß!" });
  }
});

// Middleware x·ª≠ l√Ω l·ªói
app.use((err, req, res, next) => {
  logger.error('Unhandled error', { error: err.stack });
  res.setHeader('Access-Control-Allow-Origin', 'https://pedmed-vnch.web.app');
  res.status(500).json({ success: false, message: 'L·ªói m√°y ch·ªß kh√¥ng x√°c ƒë·ªãnh' });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, '0.0.0.0', () => {
  console.log(`Server ƒëang ch·∫°y t·∫°i http://0.0.0.0:${PORT}`);
});
