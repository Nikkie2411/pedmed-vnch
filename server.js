const express = require('express');
const cors = require('cors');
const { google } = require('googleapis');

const app = express();
app.use(cors({
  origin: "https://pedmed-vnch.web.app", // Ch·ªâ cho ph√©p t·ª´ frontend n√†y
  methods: "GET,POST,PUT,DELETE",
  allowedHeaders: "Content-Type,Authorization"
}));
app.use(express.json());

// ID c·ªßa Google Sheet
const SPREADSHEET_ID = '1mDJIil1rmEXEl7tV5qq3j6HkbKe1padbPhlQMiYaq9U';

// Kh·ªüi t·∫°o Google Sheets API client
const auth = new google.auth.GoogleAuth({
  credentials: JSON.parse(process.env.GOOGLE_CREDENTIALS),
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

async function getSheetsClient() {
  const authClient = await auth.getClient();
  return google.sheets({ version: 'v4', auth: authClient });
}

async function getAccessToken() {
  const scriptProperties = PropertiesService.getScriptProperties();
  const refreshToken = scriptProperties.getProperty("REFRESH_TOKEN");
  const clientId = scriptProperties.getProperty("CLIENT_ID");
  const clientSecret = scriptProperties.getProperty("CLIENT_SECRET");

  console.log(`üìå D√πng Client ID: ${clientId}`);

  const tokenUrl = "https://oauth2.googleapis.com/token";
  const payload = new URLSearchParams({
      client_id: clientId,
      client_secret: clientSecret,
      refresh_token: refreshToken,
      grant_type: "refresh_token"
  });

  const response = await fetch(tokenUrl, {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: payload
  });

  const json = await response.json();
  if (!response.ok) {
      throw new Error(`L·ªói khi l·∫•y Access Token: ${json.error}`);
  }

  console.log(`‚úÖ L·∫•y ƒë∆∞·ª£c Access Token: ${json.access_token}`);
  return json.access_token;
}

const fetch = require('node-fetch'); // N·∫øu b·∫°n d√πng node-fetch ƒë·ªÉ g·ª≠i request

// üìß H√†m g·ª≠i email b·∫±ng Gmail API
async function sendEmailWithGmailAPI(toEmail, subject, body) {
    console.log(`üìß Chu·∫©n b·ªã g·ª≠i email ƒë·∫øn: ${toEmail}`);

    try {
        const accessToken = await getAccessToken();
        const url = "https://www.googleapis.com/gmail/v1/users/me/messages/send";

        const rawEmail = [
            "MIME-Version: 1.0",
            "Content-Type: text/html; charset=UTF-8",
            `From: PedMed VNCH <pedmedvn.nch@gmail.com>`,
            `To: <${toEmail}>`,
            `Subject: =?UTF-8?B?${Buffer.from(subject).toString('base64')}?=`,
            "",
            body
        ].join("\r\n");

        const encodedMessage = Buffer.from(rawEmail)
            .toString('base64')
            .replace(/\+/g, '-')
            .replace(/\//g, '_')
            .replace(/=+$/, '');

        const options = {
            method: "POST",
            headers: {
                "Authorization": `Bearer ${accessToken}`,
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ raw: encodedMessage })
        };

        console.log("üì§ G·ª≠i request t·ªõi Gmail API...");
        const response = await fetch(url, options);
        const result = await response.json();

        if (!response.ok) {
            throw new Error(`L·ªói g·ª≠i email: ${result.error.message}`);
        }

        console.log("‚úÖ Email ƒë√£ g·ª≠i th√†nh c√¥ng:", result);
    } catch (error) {
        console.error("‚ùå L·ªói khi g·ª≠i email:", error.message);
    }
}

// API l·∫•y d·ªØ li·ªáu t·ª´ Google Sheets
app.get('/api/drugs', async (req, res) => {
  try {
    const sheets = await getSheetsClient();
    const range = 'pedmedvnch'; // T√™n sheet ch·ª©a d·ªØ li·ªáu
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range,
    });

    const rows = response.data.values;
    if (!rows || rows.length === 0) {
      return res.status(404).send('Kh√¥ng c√≥ d·ªØ li·ªáu trong Google Sheet.');
    }

    const data = rows.map(row => row); // Tr·∫£ v·ªÅ m·∫£ng con t·ª´ Google Sheets
    res.json(data);
  } catch (error) {
    console.error('L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ Google Sheets:', error);
    res.status(500).send('Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu.');
  }
});

// API ki·ªÉm tra ƒëƒÉng nh·∫≠p
app.post('/api/login', async (req, res) => {
  const { username, password, deviceId } = req.body;
  console.log("üìå Nh·∫≠n y√™u c·∫ßu ƒëƒÉng nh·∫≠p:", { username, password, deviceId });

  try {
    const sheets = await getSheetsClient();
    const range = 'Accounts'; // T√™n sheet ch·ª©a t√†i kho·∫£n
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range,
    });

    const rows = response.data.values;
    if (!rows || rows.length === 0) {
        return res.status(404).send('Kh√¥ng c√≥ d·ªØ li·ªáu t√†i kho·∫£n.');
    }

    const headers = rows[0];
    const usernameIndex = headers.indexOf("Username");
    const passwordIndex = headers.indexOf("Password");
    const approvedIndex = headers.indexOf("Approved");
    const device1Index = headers.indexOf("Device_1");
    const device2Index = headers.indexOf("Device_2");

    if (usernameIndex === -1 || passwordIndex === -1 || approvedIndex === -1) {
      return res.status(500).json({ success: false, message: "L·ªói c·∫•u tr√∫c Google Sheets!" });
    }

    const userRowIndex = rows.findIndex(row => row[usernameIndex] === username);
    if (userRowIndex === -1) {
      console.log("‚ùå Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u!");
      return res.json({ success: false, message: "T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u ch∆∞a ƒë√∫ng!" });
    }

    const user = rows[userRowIndex];

    // üîπ Ki·ªÉm tra m·∫≠t kh·∫©u
    if (user[passwordIndex]?.trim() !== password.trim()) {
      console.log("‚ùå Sai m·∫≠t kh·∫©u!");
      return res.json({ success: false, message: "T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u ch∆∞a ƒë√∫ng!" });
    }

    // üîπ Ki·ªÉm tra tr·∫°ng th√°i "ƒê√£ duy·ªát"
    if (user[approvedIndex]?.trim().toLowerCase() !== "ƒë√£ duy·ªát") {
      console.log("‚ö†Ô∏è T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c ph√™ duy·ªát!");
      return res.json({ success: false, message: "T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c ph√™ duy·ªát b·ªüi qu·∫£n tr·ªã vi√™n." });
    }

    let currentDevices = [user[device1Index], user[device2Index]].filter(Boolean);
    console.log(`üìå Danh s√°ch thi·∫øt b·ªã hi·ªán t·∫°i c·ªßa ${username}: ${currentDevices}`);

    if (currentDevices.includes(deviceId)) {
        return res.json({ success: true, message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!" });
    }

    if (currentDevices.length >= 2) {
        return res.json({
            success: false,
            message: "T√†i kho·∫£n ƒë√£ ƒëƒÉng nh·∫≠p tr√™n 2 thi·∫øt b·ªã. Vui l√≤ng ch·ªçn thi·∫øt b·ªã c·∫ßn ƒëƒÉng xu·∫•t.",
            devices: currentDevices
        });
    }

    currentDevices.push(deviceId);
    currentDevices = currentDevices.slice(-2);

    console.log(`üìå C·∫≠p nh·∫≠t thi·∫øt b·ªã m·ªõi cho ${username}: ${currentDevices}`);

    await sheets.spreadsheets.values.update({
        spreadsheetId: SPREADSHEET_ID,
        range: `Accounts!I${userRowIndex + 1}:J${userRowIndex + 1}`,
        valueInputOption: "RAW",
        resource: { values: [currentDevices] }
    });

    return res.json({ success: true, message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng v√† thi·∫øt b·ªã ƒë√£ ƒë∆∞·ª£c l∆∞u!" });

} catch (error) {
    console.error('L·ªói khi ki·ªÉm tra t√†i kho·∫£n:', error);
    return res.status(500).send('L·ªói m√°y ch·ªß.');
}
});

//API ki·ªÉm tra tr·∫°ng th√°i ƒë√£ duy·ªát
app.post('/api/check-session', async (req, res) => {
  const { username, deviceId } = req.body;

  if (!username || !deviceId) {
    console.log("L·ªói: Kh√¥ng c√≥ t√™n ƒëƒÉng nh·∫≠p ho·∫∑c Device ID");
    return res.status(400).json({ success: false, message: "Thi·∫øu th√¥ng tin t√†i kho·∫£n ho·∫∑c thi·∫øt b·ªã!" });
  }

  try {
    console.log(`üìå Ki·ªÉm tra tr·∫°ng th√°i t√†i kho·∫£n c·ªßa: ${username}, DeviceID: ${deviceId}`);
    const sheets = await getSheetsClient();
    const range = 'Accounts'; 
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range,
    });

    const rows = response.data.values;
    if (!rows || rows.length === 0) {
      console.log("Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n trong Google Sheets");
      return res.json({ success: false, message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n!" });
    }

    const headers = rows[0];
    const usernameIndex = headers.indexOf("Username");
    const approvedIndex = headers.indexOf("Approved");
    const device1Index = headers.indexOf("Device_1");
    const device2Index = headers.indexOf("Device_2");

    if (usernameIndex === -1 || approvedIndex === -1 || device1Index === -1 || device2Index === -1) {
      console.log("L·ªói: Kh√¥ng t√¨m th·∫•y c·ªôt Username, Approved ho·∫∑c Device");
      return res.status(500).json({ success: false, message: "L·ªói c·∫•u tr√∫c Google Sheets!" });
    }

    const accounts = rows.slice(1);
    const user = accounts.find(row => row[usernameIndex]?.trim() === username.trim());

    if (!user) {
      console.log("T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!");
      return res.json({ success: false, message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!" });
    }

    console.log(`üìå Tr·∫°ng th√°i t√†i kho·∫£n: ${user[approvedIndex]}`);

    if (!user[approvedIndex] || user[approvedIndex]?.trim().toLowerCase() !== "ƒë√£ duy·ªát") {
      console.log("‚ö†Ô∏è T√†i kho·∫£n b·ªã h·ªßy duy·ªát, c·∫ßn ƒëƒÉng xu·∫•t!");
      return res.json({ success: false, message: "T√†i kho·∫£n ƒë√£ b·ªã h·ªßy duy·ªát!" });
    }

    // Ki·ªÉm tra xem thi·∫øt b·ªã c√≤n h·ª£p l·ªá kh√¥ng
    const currentDevices = [user[device1Index], user[device2Index]].filter(Boolean);
    console.log(`üìå Danh s√°ch thi·∫øt b·ªã h·ª£p l·ªá: ${currentDevices}`);

    if (!currentDevices.includes(deviceId)) {
      console.log("‚ö†Ô∏è Thi·∫øt b·ªã kh√¥ng c√≤n h·ª£p l·ªá, c·∫ßn ƒëƒÉng xu·∫•t!");
      return res.json({ success: false, message: "Thi·∫øt b·ªã c·ªßa b·∫°n ƒë√£ b·ªã ƒëƒÉng xu·∫•t!" });
    }

    res.json({ success: true });

  } catch (error) {
    console.error("‚ùå L·ªói khi ki·ªÉm tra tr·∫°ng th√°i t√†i kho·∫£n:", error);
    res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß!" });
  }
});

app.post('/api/logout-device', async (req, res) => {
  try {
      const { username, deviceId, newDeviceId } = req.body;

      if (!username || !deviceId || !newDeviceId) {
          return res.status(400).json({ success: false, message: "Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt" });
      }

      const sheets = await getSheetsClient();
      const range = 'Accounts';
      const response = await sheets.spreadsheets.values.get({
          spreadsheetId: SPREADSHEET_ID,
          range,
      });

      const rows = response.data.values;
      const headers = rows[0];
      const usernameIndex = headers.indexOf("Username");
      const device1Index = headers.indexOf("Device_1");
      const device2Index = headers.indexOf("Device_2");

      const userRowIndex = rows.findIndex(row => row[usernameIndex] === username);
      if (userRowIndex === -1) {
          return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n" });
      }

      let devices = [rows[userRowIndex][device1Index], rows[userRowIndex][device2Index]].filter(Boolean);

      devices = devices.filter(id => id !== deviceId); // X√≥a thi·∫øt b·ªã ƒë√£ ch·ªçn
      devices.push(newDeviceId);

      await sheets.spreadsheets.values.update({
          spreadsheetId: SPREADSHEET_ID,
          range: `Accounts!I${userRowIndex + 1}:J${userRowIndex + 1}`,
          valueInputOption: "RAW",
          resource: { values: [devices] }
      });

      return res.json({ success: true, message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng!" });

    } catch (error) {
      console.error('L·ªói khi ƒëƒÉng xu·∫•t thi·∫øt b·ªã:', error);
      return res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß" });
    }
  });

//API ki·ªÉm tra t√™n ƒëƒÉng nh·∫≠p
let cachedUsernames = [];

async function loadUsernames() {
    try {
        const sheets = await getSheetsClient();
        const range = 'Accounts';
        const response = await sheets.spreadsheets.values.get({
            spreadsheetId: SPREADSHEET_ID,
            range,
        });

        if (!response || !response.data || !response.data.values) {
            console.error("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i danh s√°ch username.");
            return;
        }

        const rows = response.data.values;
        const headers = rows[0] || [];
        const usernameIndex = headers.indexOf("Username");

        if (usernameIndex === -1) {
            console.error("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·ªôt Username.");
            return;
        }

        cachedUsernames = rows.slice(1).map(row => row[usernameIndex]?.trim().toLowerCase());
        console.log("‚úÖ T·∫£i danh s√°ch username th√†nh c√¥ng.");
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i danh s√°ch username:", error);
    }
}

// T·∫£i danh s√°ch username khi server kh·ªüi ƒë·ªông
loadUsernames();

// API ki·ªÉm tra username
app.post('/api/check-username', async (req, res) => {
    try {
        const { username } = req.body;
        if (!username) {
            return res.status(400).json({ exists: false, message: "Thi·∫øu t√™n ƒëƒÉng nh·∫≠p!" });
        }

        const isUsernameTaken = cachedUsernames.includes(username.trim().toLowerCase());

        return res.json({ exists: isUsernameTaken });
    } catch (error) {
        console.error("‚ùå L·ªói khi ki·ªÉm tra username:", error);
        return res.status(500).json({ exists: false, message: "L·ªói m√°y ch·ªß!" });
    }
});

// H√†m ki·ªÉm tra ƒë·ªãnh d·∫°ng email h·ª£p l·ªá
function isValidEmail(email) {
  const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailPattern.test(email);
}

//API ƒëƒÉng k√Ω user
app.post('/api/register', async (req, res) => {
  const { username, password, fullname, email, phone } = req.body;

  if (!username || !password || !fullname || !email || !phone) {
      return res.status(400).json({ success: false, message: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
  }

  if (!isValidEmail(email)) {
    return res.status(400).json({ success: false, message: "Email kh√¥ng h·ª£p l·ªá!" });
  }

  try {
      const sheets = await getSheetsClient();
      const range = 'Accounts';
      
      // üîπ Ki·ªÉm tra xem username ƒë√£ t·ªìn t·∫°i ch∆∞a
      const response = await sheets.spreadsheets.values.get({
          spreadsheetId: SPREADSHEET_ID,
          range,
      });

      const rows = response.data.values;
      if (!rows || rows.length === 0) {
          return res.status(500).json({ success: false, message: "L·ªói d·ªØ li·ªáu Google Sheets!" });
      }

      const headers = rows[0];
      const usernameIndex = headers.indexOf("Username");
      const emailIndex = headers.indexOf("Email");

      if (usernameIndex === -1 || emailIndex === -1) {
        return res.status(500).json({ success: false, message: "L·ªói c·∫•u tr√∫c Google Sheets!" });
      }

      const accounts = rows.slice(1);
      const isTaken = accounts.some(row => row[usernameIndex]?.trim() === username.trim());
      const isEmailTaken = accounts.some(row => row[emailIndex]?.trim() === email.trim());

      if (isTaken) {
          return res.json({ success: false, message: "T√™n ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá!" });
      }

      if (isEmailTaken) {
        return res.json({ success: false, message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!" });
      }

      // üîπ Th√™m c·ªôt Date (ng√†y ƒëƒÉng k√Ω)
      const today = new Date().toISOString().split("T")[0]; // L·∫•y ng√†y hi·ªán t·∫°i YYYY-MM-DD
      const newUser = [[username, password, fullname, email, phone, "Ch∆∞a duy·ªát", today]];

      await sheets.spreadsheets.values.append({
          spreadsheetId: SPREADSHEET_ID,
          range,
          valueInputOption: "USER_ENTERED",
          resource: { values: newUser }
      });

      res.json({ success: true, message: "ƒêƒÉng k√Ω th√†nh c√¥ng! Th√¥ng b√°o ph√™ duy·ªát t√†i kho·∫£n th√†nh c√¥ng s·∫Ω ƒë∆∞·ª£c g·ª≠i t·ªõi email c·ªßa b·∫°n (c√≥ th·ªÉ c·∫ßn ki·ªÉm tra trong m·ª•c Spam)." });

  } catch (error) {
      console.error("L·ªói khi ƒëƒÉng k√Ω t√†i kho·∫£n:", error);
      res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß!" });
  }
});

const crypto = require("crypto");

// L∆∞u OTP t·∫°m th·ªùi (s·∫Ω m·∫•t ƒëi khi server restart)
const otpStore = new Map(); 

//API g·ª≠i OTP ƒë·∫øn email user
app.post('/api/send-otp', async (req, res) => {
  const { username } = req.body;

  console.log("üìå Nh·∫≠n y√™u c·∫ßu g·ª≠i OTP t·ª´:", username);

  if (!username) {
      console.log("‚ùå Thi·∫øu username trong request!");
      return res.status(400).json({ success: false, message: "Thi·∫øu th√¥ng tin t√†i kho·∫£n!" });
  }

  try {
      console.log(`üìå Ki·ªÉm tra t√†i kho·∫£n: ${username}`);
      const sheets = await getSheetsClient();
      const range = 'Accounts';
      const response = await sheets.spreadsheets.values.get({
          spreadsheetId: SPREADSHEET_ID,
          range,
      });

      if (!response || !response.data || !response.data.values) {
          console.log("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ Google Sheets!");
          return res.status(500).json({ success: false, message: "L·ªói l·∫•y d·ªØ li·ªáu t√†i kho·∫£n!" });
      }

      console.log("‚úÖ D·ªØ li·ªáu t·ª´ Google Sheets:", response.data.values);

      const rows = response.data.values;
      const headers = rows[0];
      const usernameIndex = headers.indexOf("Username");
      const emailIndex = headers.indexOf("Email");

      if (usernameIndex === -1 || emailIndex === -1) {
          console.log("‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt Username ho·∫∑c Email!");
          return res.status(500).json({ success: false, message: "L·ªói c·∫•u tr√∫c Google Sheets!" });
      }

      const user = rows.find(row => row[usernameIndex]?.trim() === username.trim());

      if (!user) {
          console.log("‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n!");
          return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n!" });
      }

      const userEmail = user[emailIndex];
      if (!userEmail || !userEmail.includes("@")) {
          console.log(`‚ùå Email kh√¥ng h·ª£p l·ªá: ${userEmail}`);
          return res.status(400).json({ success: false, message: "Email kh√¥ng h·ª£p l·ªá!" });
      }

      // üîπ T·∫°o m√£ OTP 6 s·ªë ng·∫´u nhi√™n
      const otpCode = Math.floor(100000 + Math.random() * 900000);
      console.log(`üìå M√£ OTP cho ${username}: ${otpCode}`);

      otpStore.set(username, otpCode); // L∆∞u OTP t·∫°m th·ªùi

      // üîπ G·ª≠i email
      try {
          sendEmailWithGmailAPI(userEmail, "M√£ x√°c nh·∫≠n ƒë·ªïi m·∫≠t kh·∫©u", `
              <p>Xin ch√†o ${username},</p>
              <p>M√£ x√°c nh·∫≠n ƒë·ªïi m·∫≠t kh·∫©u c·ªßa b·∫°n l√†: <b>${otpCode}</b></p>
              <p>Vui l√≤ng nh·∫≠p m√£ n√†y v√†o trang web ƒë·ªÉ ti·∫øp t·ª•c ƒë·ªïi m·∫≠t kh·∫©u.</p>
          `);
      } catch (emailError) {
          console.log("‚ùå L·ªói khi g·ª≠i email:", emailError);
          return res.status(500).json({ success: false, message: "L·ªói khi g·ª≠i email!" });
      }

      return res.json({ success: true, message: "M√£ x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n!" });

  } catch (error) {
      console.error("‚ùå L·ªói m√°y ch·ªß khi g·ª≠i OTP:", error);
      return res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß!" });
  }
});

//API x√°c th·ª±c OTP
app.post('/api/verify-otp', (req, res) => {
  const { username, otp } = req.body;

  if (!username || !otp) {
      return res.status(400).json({ success: false, message: "Thi·∫øu th√¥ng tin x√°c nh·∫≠n!" });
  }

  const storedOtp = otpStore.get(username);

  if (!storedOtp || storedOtp !== parseInt(otp, 10)) {
      return res.json({ success: false, message: "M√£ x√°c nh·∫≠n kh√¥ng ƒë√∫ng ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });
  }

  otpStore.delete(username); // X√≥a OTP sau khi d√πng
  res.json({ success: true, message: "M√£ x√°c nh·∫≠n h·ª£p l·ªá!" });
});

//API c·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
app.post('/api/reset-password', async (req, res) => {
  const { username, newPassword } = req.body;

  if (!username || !newPassword) {
      return res.status(400).json({ success: false, message: "Thi·∫øu th√¥ng tin m·∫≠t kh·∫©u!" });
  }

  try {
      const sheets = await getSheetsClient();
      const range = 'Accounts';
      const response = await sheets.spreadsheets.values.get({
          spreadsheetId: SPREADSHEET_ID,
          range,
      });

      const rows = response.data.values;
      const headers = rows[0];
      const usernameIndex = headers.indexOf("Username");
      const passwordIndex = headers.indexOf("Password");

      if (usernameIndex === -1 || passwordIndex === -1) {
          return res.status(500).json({ success: false, message: "L·ªói c·∫•u tr√∫c Google Sheets!" });
      }

      const userRowIndex = rows.findIndex(row => row[usernameIndex]?.trim() === username.trim());

      if (userRowIndex === -1) {
          return res.json({ success: false, message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n!" });
      }

      await sheets.spreadsheets.values.update({
          spreadsheetId: SPREADSHEET_ID,
          range: `Accounts!B${userRowIndex + 1}`, // C·ªôt B ch·ª©a m·∫≠t kh·∫©u
          valueInputOption: "RAW",
          resource: { values: [[newPassword]] }
      });

      res.json({ success: true, message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!" });

  } catch (error) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u:", error);
      res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß!" });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
});
